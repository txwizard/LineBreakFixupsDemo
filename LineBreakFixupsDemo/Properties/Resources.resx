<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_CMDARG_IS_INVALID" xml:space="preserve">
    <value>ABORTING: Command line argument {0} is invalid.</value>
    <comment>Method RunThisTest formats a message from this string for display on the console, then makes the message template the Message property on a new InvalidOperationException exception.</comment>
  </data>
  <data name="ERRMSG_CORRUPTED_EMBBEDDED_RESOURCE_LABEL" xml:space="preserve">
    <value>The label row of internal resource {0} is invalid.{3}    Expected value = {1}{3}    Actual value   = {2}</value>
    <comment>The private LoadMap routine uses this message to report a corrupted label row in its internal resource file.</comment>
  </data>
  <data name="ERRMSG_CORRUPTED_EMBEDDED_RESOURCE_DETAIL" xml:space="preserve">
    <value>Detail record {0} of internal resource {1} is invalid.{5}    Expected field count = {2}{5}    Actual field count   = {3}{5}    Actual record        = {4}</value>
    <comment>The private LoadMap routine uses this message to report a corrupted label row in its internal resource file.</comment>
  </data>
  <data name="FILE_LABEL_APP_SETTINGS_LIST" xml:space="preserve">
    <value>    Application Settings Report</value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_CONTENT_REPORT" xml:space="preserve">
    <value>    Detailed Report File:  </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_EMBEDD3ED_RESOUCES_REPORT" xml:space="preserve">
    <value>    Embedded Resources Report</value>
    <comment>The main routine uses this string to label the beginning of the report generated by the  first test.</comment>
  </data>
  <data name="FILE_LABEL_FINAL" xml:space="preserve">
    <value>    Output File:           </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_INPUT" xml:space="preserve">
    <value>    Input File:</value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_INTERMEDIATE" xml:space="preserve">
    <value>    Intermediate File:     </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="JSON_DESERIALIZER_TOSTRING_TEMPLATE" xml:space="preserve">
    <value>TestReportLabel        = {0}{6}RESTResponseFileName   = {1}{6}ConvertLineEndings     = {2}{6}IntermediateFileName   = {3}{6}FinalOutputFileName    = {4}{6}ResponseObjectFileName = {5}</value>
    <comment>The ToString overload on JSONDeserializationUseCase instances uses this template to render its output.</comment>
  </data>
  <data name="LBL_APP_SETTINGS_LIST" xml:space="preserve">
    <value>Item\tName\tType\tDefault</value>
    <comment>This string is the label row for a tab delimited report of the configuration settings.</comment>
  </data>
  <data name="MSG_APP_SETTINGS_DETAIL_TEMPLATE" xml:space="preserve">
    <value>        {0,2} of {1,2}: Name = {2}, DefaultValue = {3}</value>
    <comment>The main routine generates a detail item covering one settings value from this template.</comment>
  </data>
  <data name="MSG_APP_SETTINGS_SORTED_ITEM" xml:space="preserve">
    <value>        {0,2} of {1,2}: Name = {2}, Type = {3}, DefaultValue = {4}</value>
    <comment>The main routine generates an application setting detail item from this template.</comment>
  </data>
  <data name="MSG_BEGIN" xml:space="preserve">
    <value>{2}Test # {0} - Exercising class {1}:{2}</value>
    <comment>Static method Utl.BeginTest generates a logo baanner from this template.</comment>
  </data>
  <data name="MSG_DONE" xml:space="preserve">
    <value>{2}Test # {0} Done - Final Status Code = {1}</value>
    <comment>Static method Utl.TestDone generates a logo baanner from this template.</comment>
  </data>
  <data name="MSG_RESPONSE_DETAILS_LABELS" xml:space="preserve">
    <value>Item\tActivity_Date\tOpen\tHigh\tLow\tClose\tAdjustedClose\tVolume\tDividendAmount\tSplitCoefficient</value>
    <comment>The main routine uses this template to construct a heading for the section that reports the details from the response.</comment>
  </data>
  <data name="MSG_RESPONSE_METADATA" xml:space="preserve">
    <value>    Metadata from response: Information   = {0}{6}                            Symbol        = {1}{6}                            LastRefreshed = {2}{6}                            OutputSize    = {3}{6}                            TimeZone      = {4}{6}                            Detail Count  = {5}</value>
    <comment>The ConsumeResponse method, defined in the main source module (Program.cs) uses this template to construct a message that reports the metadata from the response. NOTE: This is the longes label against which others must align at the colon in this label.</comment>
  </data>
  <data name="MSG_SETTINGS_ENUMERATION_HEADING" xml:space="preserve">
    <value>    Enumerate the {0} settings as returned from the collection:{1}</value>
    <comment>The main routine generates a report heading from this string.</comment>
  </data>
  <data name="MSG_SORTED_APP_SETTINGS_LIST_HEADING" xml:space="preserve">
    <value>{1}    Enumerate the {0} sorted settings:{1}</value>
    <comment>The main routine uses this template to begin the list of sorted application settings.</comment>
  </data>
  <data name="MSG_TEST_2_PROLOGUE" xml:space="preserve">
    <value>Program (method ListAppSettings, which sorts and lists the application settings)</value>
    <comment>The main routine uses this string to label the beginning of the report generated by the second test.</comment>
  </data>
  <data name="MSG_TEST_3_PROLOGUE" xml:space="preserve">
    <value>Program (method ListEmbeddedResources, which sorts and lists embedded string resources)</value>
    <comment>generated by the third test.</comment>
  </data>
  <data name="MSG_TEST_4_PROLOGUE" xml:space="preserve">
    <value>JSON Fixups from Transformed Windows Input</value>
    <comment>This string inabits the first element of the JSONDeserializationUseCase array.</comment>
  </data>
  <data name="MSG_TEST_5_PROLOGUE" xml:space="preserve">
    <value>JSON Fixups from Raw Windows Input</value>
    <comment>This string inabits the second element of the JSONDeserializationUseCase array.</comment>
  </data>
  <data name="MSG_TEST_6_PROLOGUE" xml:space="preserve">
    <value>JSON Fixups from Raw Unix Input</value>
    <comment>This string inabits the third element of the JSONDeserializationUseCase array.</comment>
  </data>
</root>